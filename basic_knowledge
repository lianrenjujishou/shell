condition statements:
    if <condition>; then
        commands
    [elif <condition>; then
        commands]...
    [else
        commands]
    fi
loop statements:
    for i in 1 2 3 4
        <do|{>
            commands
       <done|}>
    
    for i in `commands`
        <do|{>
            commands
       <done|}>
    
    for i             #if [in range] is ignored, $@ is the default
        <do|{>
            commands
       <done|}>
       
    for ((init;condition;self-increment|self-decrement));
        <do|{>
	    commands
	<done|}>
    
    while commands
        <do|{>
            commands
       <done|}>
    
    until commands
        <do|{>
            commands
       <done|}>
    **. a.if any questions, thinking about whether single/double quotes are missing;
        b.after while and until often follow by test or [] or [[]]
        c.if any questions, thinking about whether variable is not initialized before using

declare a variables:
    let var=value       #between var and value the white space can't appear;and in this form, value can be a arithmetic expression
        let a=0
	let a=[$]a+1   # equal to a=$(([$]a+1)) or ((a=[$]a+1))
    var=value    # in this form, value only a single value can't be a expression
delcare a function:
    [function] func_name(){
        commands
    }
pass argments to a function:
    func_name arg1 arg2 ...    # arguments referenced in $1,$2,... in func body
    *.we can't reference script arguments in func body directly, if we want reference script arugments in func body we can pass $n as a func arguments,then reference in func body, for example:
        yang_script 1 2 3 4
	yang_func $3      # we can use $1 in func body to reference yang_script's $3 
pass arguments to a script:    
    script_name arg1 arg2 ...  # arguments referenced in $1,$2,... in script
    
how to a arithmetic operation then assign to a variable:
    a=$(([$]var+1))
    ((a=[$]var+1))
how to assign a variable with the result of commands:
    a=$(command[|commands])
    a=`command[|commands]`
how to group commands:
    ([ ]command[command;]...[; ])
    { command[;command]...;[ ]}
    *.the difference both above two groups are () will fork a shell to execute commands and {} execute commands in current shell, so the results of () will not affect current shell , {} opposite. that is whether environment variables and variables assignments will affect follows commands  # for example, PATH
complex variable operation:
  replace operator:
    ${varname:-word} #if varname exist and not null then return varname value,if not return word
    ${varname:=word} #if varname exist and not null then return varname value, if not define varname with word and return word
    ${varname:?message} #if varname exist and not null then return varname value,if not return message and exit current script,if message ignored,then return 
"parameter null or not set"

    ${varname:+word} # if varname exist and not null then return word ,if not return null
  pattern match operator:
    ${varname#pattern} #if pattern match the head of varname value, then truncate the minimum match and return the remains
    ${varname##pattern} #if pattern match the head of varname value, then truncate the maximum match and return the remains
    ${varname%pattern} #if pattern match the end of varname value, then truncate the minimum match and return the remains
    ${varname%%pattern} # if pattern match the end of varname value, then truncate the maximum match and return remains
    ${varname/pattern/string} #replace only the first appear
    ${varname//pattern/string} #replace all appear
    ${varname/#pattern/string} #repalce the  start of varname value only
    ${varname/%pattern/string} #repalce the  end of varname value only
    ${<@|*>/a/b} #replace each of $@ then return the replaced list. # and % is available

test:  //info test 比 man test有更多的细节
    https://www.cnblogs.com/post/ReadAuth?blogId=257905&PostId=11737895&url=%2Flianrenjujishou%2Fprotected%2Fp%2F11737895.html
    https://github.com/lianrenjujishou/Documentation_Manual/blob/master/linuxcommandset/test(no%20finished)(1).txt
    例子:
    数字之间的比较: -eq -ne -lt -gt -ge -le 
     if [ 1 -eq/-ne/-lt/-gt/-le/-ge 2];then command; fi
    字符串之间的比较: ==/= != < > 
     if ["x" ==/=/!=/>/<"y"]; then command; fi //逐字符按axcii进行比较, 一般的man test中对于比较两个字符串相等都只提了单等号,=,没提双等号的事儿,但stackexchange上一个人看到的是单等与双等是同义词. //参考链接: https://unix.stackexchange.com/questions/168284/unix-test-when-to-use-eq-vs-vs-in-test-commands
    文件是否存在: -f -e  //-e相当于 -f | -d
     if [ -f /home/file ]; then command; fi
    目录是否存在: -d -e
     if [ -d /home/dir ]; then command; fi
    多个逻辑表达式: && || -a -o
     if [ -f /home/file ] && [ -d /home/dir ]; then command; fi
     if [ -f /home/file -a/-o -d /home/dir ]; then command; fi    //注意-a,and或-o,or前后接的是两个表达式,而通过示例也可看出,表达式一般是由 "选项+文件或目录的路径"组成.

    [[]]允许在里面使用&&和||: 
     if [[ -f /home/file &&/|| -d /home/dir ]; then command; fi
    另外[[]]中还支持=~符号, 而[]中不支持, 当用该符号时,右侧的内容会作为正则表达式和左边的字符串进行匹配, 通过实践, 最重要的一点是右边模式部分不能用引号括起来: 
     if [[ "" =~ .a. ]]; then echo 123;fi  //注意 .a. 没有用引号括起来
    虽然[]和[[]]中都支持==符号,但是==在[]中的作用和=相同; 在[[]]中==右面的内容会被作为模式和左面的字符串进行匹配.

    help bash 里的CONDITION EXPRESSIONS部分提到了test中的表达式其实指的就是test --help中除了( EXPRESSION ), "! EXPRESSION" "x -a y" "x -o y"剩下的那些.也就是说: 
     ! EXPRESSION 可以是 ! -n STRING:
     if [ ! -n "" ];then echo 123; fi
    问题 ( EXPRESSION )形式到底咋用? 

multiple conditions:
    [[ expression ]] #expression same as test or [ ], but [[]] can use logic symbol &&,|| and ==,!= for pattern match, and =~ for regex match
    *. space is very important with in [[]], almost everywhere
strong reference:
    '' # so-called "strong reference" means the variable will not be replace with its value within the ''
weak reference:
    "" # so-called "wealk reference" means the variable will be replace with its value within the ""
annotation: 
    https://blog.csdn.net/lansesl2008/article/details/20558369/
$x:
    $0: name of the shell script
    $1,$2...: positional arguments of shell script
    $*:represent all positonal argments as one string
    $@:pass all positonal arguments from $1
    $$: process id of current running shell script
    $?:exit status of last command
    $#:the number of positonal arguments passed to shell script
    $!:the last process id background
    $-:echo shell current options, the same as set command
